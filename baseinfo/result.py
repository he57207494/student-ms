# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'result.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QTableWidgetItem, QMessageBox

from service import service


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
        self.setUp()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(763, 317)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./image/favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(0, 40, 761, 191))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 61, 21))
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(80, 10, 61, 21))
        self.comboBox.setObjectName("comboBox")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(150, 10, 61, 21))
        self.label_2.setObjectName("label_2")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(210, 10, 61, 21))
        self.comboBox_2.setObjectName("comboBox_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(420, 10, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(500, 10, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(580, 10, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(660, 10, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(310, 240, 41, 21))
        self.label_5.setObjectName("label_5")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(350, 240, 51, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(20, 240, 61, 21))
        self.label_6.setObjectName("label_6")
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(90, 240, 61, 21))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_4 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(340, 10, 61, 21))
        self.comboBox_4.setObjectName("comboBox_4")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(280, 10, 61, 21))
        self.label_10.setObjectName("label_10")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(170, 240, 61, 21))
        self.label_8.setObjectName("label_8")
        self.comboBox_5 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(240, 240, 61, 21))
        self.comboBox_5.setObjectName("comboBox_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 763, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "学生成绩管理"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "编号"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "学生编号"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "学生姓名"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "种类"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "科目"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "班级"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "成绩"))
        self.label.setText(_translate("MainWindow", "考试种类："))
        self.label_2.setText(_translate("MainWindow", "选择年级："))
        self.pushButton.setText(_translate("MainWindow", "刷新"))
        self.pushButton_2.setText(_translate("MainWindow", "添加"))
        self.pushButton_3.setText(_translate("MainWindow", "修改"))
        self.pushButton_4.setText(_translate("MainWindow", "删除"))
        self.label_5.setText(_translate("MainWindow", "年龄："))
        self.label_6.setText(_translate("MainWindow", "学生姓名："))
        self.label_10.setText(_translate("MainWindow", "选择班级："))
        self.label_8.setText(_translate("MainWindow", "考试科目："))


    def setUp(self):
        self.bindCbox()

        #绑定相关事件
        self.pushButton.clicked.connect(self.query)
        self.pushButton_2.clicked.connect(self.add)
        self.tableWidget.itemSelectionChanged.connect(self.getItem)
        self.pushButton_3.clicked.connect(self.edit)
        self.pushButton_4.clicked.connect(self.delete)

    def query(self):
        self.tableWidget.setRowCount(0)
        kindname = self.comboBox.currentText()
        grade = self.comboBox_2.currentText()
        Class = self.comboBox_4.currentText()

        if kindname == "所有":
            if grade == "所有":
                if Class == "所有":
                    result = service.query2("select * from v_resultinfo")
                else:
                    result = service.query2("select * from v_resultinfo where className = '" + Class + "'")
            else:
                if Class == "所有":
                    result = service.query2("select * from v_resultinfo where gradeName = '" + grade + "'")
                else:
                    result = service.query2("select * from v_resultinfo where gradeName = '" + grade + "' and className = '" + Class + "'")
        else:
            if grade == "所有":
                if Class == "所有":
                    result = service.query2("select * from v_resultinfo where kindName = '" + kindname + "'")
                else:
                    result = service.query2("select * from v_resultinfo where kindName = '" + kindname + "' and className = '" + Class + "'")
            else:
                if Class == "所有":
                    result = service.query2("select * from v_resultinfo where kindName = '" + kindname + "' and gradeName = '" + grade + "'")
                else:
                    result = service.query2("select * from v_resultinfo where kindName = '" + kindname + "' and gradeName = '" + grade + "' and className = '" + Class + "'")
        for i in range(len(result)):
            self.tableWidget.insertRow(i)
            for j in range(7):
                if j == 5:
                    data = QTableWidgetItem(result[i][j+1] + result[i][j] + "班")
                elif j == 6:
                    data = QTableWidgetItem(str(result[i][j+1]))
                else:
                    data = QTableWidgetItem(str(result[i][j]))
                self.tableWidget.setItem(i, j, data)

    def bindCbox(self):
        try:
            self.comboBox.addItem("所有")
            result = service.query2("select kindName from tb_examkinds")
            for i in result:
                self.comboBox.addItem(i[0])

            self.comboBox_2.addItem("所有")
            result = service.query2("select gradeName from tb_grade")
            for i in result:
                self.comboBox_2.addItem(i[0])

            self.comboBox_4.addItem("所有")
            result = service.query2("select className from tb_class")
            for i in result:
                self.comboBox_4.addItem(i[0])


            result = service.query2("select stuName from tb_student")
            for i in result:
                self.comboBox_3.addItem(i[0])

            self.comboBox_5.addItem("所有")
            result = service.query2("select subName from tb_subject")
            for i in result:
                self.comboBox_5.addItem(i[0])
        except Exception as e:
            print(e)
            print("绑定下拉框失败")


    def add(self):
        subName = self.comboBox_5.currentText()
        stuName = self.comboBox_3.currentText()
        score = self.lineEdit_3.text()
        kindName = self.comboBox.currentText()
        gradeName = self.comboBox_2.currentText()
        className = self.comboBox_4.currentText()

        if kindName != "所有":
            result = service.query2("select kindId from tb_examkinds where kindName = '" + kindName + "'")
            kindId = result[0][0]

            if gradeName != "所有":
                result = service.query2("select gradeId from tb_grade where gradeName = '" + gradeName + "'")
                gradeId = result[0][0]

                if className != "所有":
                    result = service.query2("select classId from tb_class where className = '" + className + "'")
                    classId = result[0][0]

                    if score != "":
                        result = service.query2("select stuId from tb_student where stuName = '" + stuName + "'")
                        stuId = result[0][0]

                        result = service.query2("select subId from tb_subject where subName = '" + subName + "'")
                        subId = result[0][0]

                        result = service.exec("insert into tb_result(stuID,kindID,subID,result) VALUES (%s,%s,%s,%s)",(stuId,kindId,subId,score))
                        if result > 0:
                            QMessageBox.information(None, '提示', '添加成功', QtWidgets.QMessageBox.Ok)
                        else:
                            QMessageBox.warning(None, '提示', '添加失败', QtWidgets.QMessageBox.Ok)
                    else:
                        QMessageBox.warning(None, '提示', '成绩不能为空', QtWidgets.QMessageBox.Ok)
                else:
                    QMessageBox.warning(None, '提示', '请选择班级', QtWidgets.QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '提示', '请选择年级', QtWidgets.QMessageBox.Ok)
        else:
            QMessageBox.warning(None, '提示', '请选择考试种类', QtWidgets.QMessageBox.Ok)

    def getItem(self):
        row = self.tableWidget.currentRow()
        self.select = self.tableWidget.item(row,0).text()
        self.lineEdit_3.setText(self.tableWidget.item(row,6).text())
        print(self.select)

    def edit(self):
        try:
            if self.select != "":
                ID = self.select
                score = self.lineEdit_3.text()
                result = service.exec("update tb_result set result = %s where ID = %s",(score,ID))
                if result > 0:
                    QMessageBox.information(None, "提示", "分数修改成功", QMessageBox.Ok)
                    self.tableWidget.clearContents()
                    self.query()
                else:
                    QMessageBox.warning(None,"警告","分数修改失败",QMessageBox.Ok)
        except:
            QMessageBox.warning(None, "警告", "请选择需要修改的数据", QMessageBox.Ok)


    def delete(self):
        try:
            if self.select != "":
                result = service.exec("delete from tb_result where ID = %s",(self.select,))
                if result > 0:
                    QtWidgets.QMessageBox.information(None, '提示', '信息删除成功', QMessageBox.Ok)
                    self.tableWidget.clearContents()
                    self.query()
            else:
                QtWidgets.QMessageBox.information(None, '提示', '请选择要删除的数据', QMessageBox.Ok)
        except Exception as e:
            QtWidgets.QMessageBox.information(None, '提示', str(e), QMessageBox.Ok)