# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'subject.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QTableWidgetItem, QMessageBox

from service import service


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
        self.setUp()
    def setUp(self):
        self.query()

        #绑定事件
        self.tableWidget.itemSelectionChanged.connect(self.getItem)
        self.pushButton.clicked.connect(self.add)
        self.pushButton_2.clicked.connect(self.edit)
        self.pushButton_3.clicked.connect(self.delete)
        self.pushButton_4.clicked.connect(self.close)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(402, 318)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./image/favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 401, 161))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 180, 61, 31))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(70, 180, 121, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(210, 180, 61, 31))
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(270, 180, 121, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(80, 230, 71, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(160, 230, 71, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(240, 230, 71, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(320, 230, 71, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 402, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "考试科目设置"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "科目编号"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "科目名称"))
        self.label.setText(_translate("MainWindow", "科目编号"))
        self.label_2.setText(_translate("MainWindow", "科目名称"))
        self.pushButton.setText(_translate("MainWindow", "添加"))
        self.pushButton_2.setText(_translate("MainWindow", "修改"))
        self.pushButton_3.setText(_translate("MainWindow", "删除"))
        self.pushButton_4.setText(_translate("MainWindow", "退出"))


    def query(self):
        self.tableWidget.setRowCount(0) #清空表格中的所有行
        result = service.query2("select * from tb_subject")
        row = len(result)
        for i in range(row):
            self.tableWidget.insertRow(i)
            for j in range(len(result[0])):
                data = QTableWidgetItem(str(result[i][j]))
                self.tableWidget.setItem(i,j,data)

    def getName(self,name):
        result = service.query("select * from tb_subject where subName = %s",(name,))
        return len(result)


    def getItem(self):
        row = self.tableWidget.currentRow()
        self.select = self.tableWidget.item(row,0).text()   #获取选中的行的第一列的数据

        #将选中的行的数据显示在输入框中
        self.lineEdit.setText(self.tableWidget.item(row,0).text())
        self.lineEdit_2.setText(self.tableWidget.item(row,1).text())


    def add(self):
        subjectID = self.lineEdit.text()
        subjectName = self.lineEdit_2.text()
        if subjectID != "" and subjectName != "":
            if self.getName(subjectName) > 0:
                QMessageBox.information(None,'提示','已经存在',QMessageBox.Ok)
            else:
                result = service.exec("insert into tb_subject(subID,subName) values(%s,%s)",(subjectID,subjectName))
                if result > 0:
                    QMessageBox.information(None,'提示','信息添加成功',QMessageBox.Ok)

                    #添加成功后，刷新表格中的数据
                    self.tableWidget.clearContents()
                    self.query()
                else:
                    QMessageBox.information(None, '提示', '信息添加失败', QMessageBox.Ok)
        else:
            QMessageBox.waring(None, '警告', '请输入数据', QMessageBox.Ok)


    def edit(self):
        try:
            if self.select != "":
                subjectID = self.lineEdit.text()
                subjectName = self.lineEdit_2.text()
                if subjectName != "":
                    if self.getName(subjectName) > 0:
                        self.lineEdit_2.setText("")
                        QMessageBox.information(None, '提示', '已经存在', QMessageBox.Ok)
                    else:
                        result = service.exec("update tb_subject set subID = %s,subName = %s where subID = %s",(subjectID,subjectName,subjectID))
                        if result > 0:
                            QMessageBox.information(None, '提示', '信息修改成功', QMessageBox.Ok)
                            self.tableWidget.clearContents()
                            self.query()
                        else:
                            QMessageBox.information(None, '提示', '信息修改失败', QMessageBox.Ok)
        except:
            QMessageBox.information(None, '提示', '请选择要修改的数据', QMessageBox.Ok)

    def delete(self):
        try:
            if self.select != "":
                result = service.exec("delete from tb_subject where subID = %s",(self.select,))
                if result > 0:
                    QMessageBox.information(None, '提示', '信息删除成功', QMessageBox.Ok)
                    self.tableWidget.clearContents()
                    self.query()
                else:
                    QMessageBox.information(None, '提示', '信息删除失败', QMessageBox.Ok)
            else:
                QMessageBox.information(None, '提示', '请选择要删除的数据', QMessageBox.Ok)
        except Exception as e:
            QMessageBox.information(None, '提示', str(e), QMessageBox.Ok)